function test_kw(x,g,r,cls,tt,metafile,ax,compare,handles,ef)
% use Kruskal-Wallis test to test for differences in medians (note that if
% the Levene's test fails to show that variances are
% homogeneous, this is the prefered test to compare the data)
defFontSize=10;

% test can be done only when there are multiple measurements for each group
if length(g)==length(unique(g))
    
    fprintf(1,'ERROR: Number of measurements of %s for each ROI is 1. ROIs cannot be compared now.\n', r);
    fprintf(1,'Compare classes or treatments.\n');
    
else
    
    [p,table,stats] = kruskalwallis(x,g,'off');

%     % calculate means, std, etc.
     [mm,ss,gn,nn,meanci,sem]=grpstats(x,g,{'mean','std','gname','numel','meanci','sem'});
     [mc]=grpstats(cls,g,{'mean'});
     [mt]=grpstats(tt,g,{'mean'});
% 
%     fprintf(1,'group\tmean     \tsem      \tstd      \tN:\n');
%     for ii=1:length(mm)
%         fprintf(1,'%s\t%.3e\t%.3e\t%.3e\t%d\n',gn{ii},mm(ii),sem(ii),ss(ii),nn(ii));
%     end;    
    
    if ~isnan(p) % p is NaN when there is only one datapoint
        % run multcompare to get the values of cell comparisons (c)
        if get(handles.checkbox44,'value')
            figure;
            pause(0.1);
            [c,m,h,gnames] = multcompare(stats,'display','on');
        else    
            [c,m,h,gnames] = multcompare(stats,'display','off');
        end;

        % get cell ranking and min/max boundaries of the ranks
        [sdm,gnamess,ranking,minmaxband]=get_sdm(mm,meanci,sem,c,gnames);

        apos = get(ax,'position');

        % display cell ranking results
        display_sdm_ranks(sdm, gnamess, minmaxband, ranking, ax);

        xlabel(r,'Fontsize',defFontSize)
        ylabel(compare,'Fontsize',defFontSize);
        set(handles.axes1,'Fontsize',defFontSize);
        set(ax,'position',apos);
        
        if ~get(handles.checkbox100,'value')
            xs=str2num(get(handles.edit1,'String'));
            set(handles.axes1,'xlim',xs);
            ys=str2num(get(handles.edit2,'String'));
            set(handles.axes1,'ylim',ys);
        end

        if p>0.05
            title(sprintf('Medians do not significantly differ (K-W, p=%.2e)',p),...
				'Fontsize',defFontSize,'fontweight','normal');
        else
            title(sprintf('Medians significantly differ (K-W, p=%.2e)',p),...
				'Fontsize',defFontSize,'fontweight','normal');
        end
        
    end

    % print text output to a default filename a, if export flag ef==1
    if ef
        
        a = construct_output_fname(metafile,r,compare,'tests','kw','.txt');
        
        [filepath filename ext]=fileparts(a);
        
        if 0 & isunix
            % use this if uiputfile crashes when using the default pathname as input            
            [FileName,PathName] = uiputfile('*.txt','Save statistical test as',[filepath delimiter]);
            if FileName == 0 & PathName == 0
                % when cancel pressed, the name will be constructed from
                % default filename
                PathName = [filepath delimiter];
                FileName = [filename ext];
            end
        else
            % use this when uiputfile doesn't crash
            fprintf(1,'Warning: this is where Matlab can crash. test_kw.m: 82\n');
            [FileName,PathName] = uiputfile('*.txt','Save statistical test as',a);
        end
        
        if length(PathName)>0 % if cancel was not pressed
            
            a = [PathName FileName];
            
            fid = fopen(a,'w');

            global LANS_version;
            fprintf(fid,'%c Generated by Look@NanoSIMS (version %s) on %s\n','%',LANS_version,datestr(now));

            if strcmp(compare,'ROI')
                fprintf(fid,'\nAnalysis of %s in ROIs from classes "%s":\n',r, char(unique(cls))');
            end
            if strcmp(compare,'class')
                fprintf(fid,'\nAnalysis of %s averaged over ROIs from classes "%s":\n',r, char(unique(cls)));
            end
            if strcmp(compare,'treat')
                fprintf(fid,'\nAnalysis of %s averaged over ROIs from class "%s":\n',r, char(unique(cls)));
            end

            % print mean, std, etc.
            fprintf(fid,'------------------------------------------------------------------------\n');
            fprintf(fid,'mean\t\tstd_devi\t\t%s\t\tN\t\tc\t\tt\n',compare);
            fprintf(fid,'------------------------------------------------------------------------\n');
            for ii=1:length(mm)
                if strcmp(compare,'ROI') | strcmp(compare,'treat')
                    fprintf(fid,'%.4e\t\t%.4e\t\t%s\t\t%d\t\t%c\t\t%d\n',mm(ii),ss(ii),gn{ii},nn(ii),mc(ii),mt(ii));
                end
                if strcmp(compare,'class')
                    fprintf(fid,'%.4e\t\t%.4e\t\t%c\t\t%d\t\t%c\t\t%d\n',mm(ii),ss(ii),str2num(gn{ii}),nn(ii),mc(ii),mt(ii));
                end
            end
            fprintf(fid,'------------------------------------------------------------------------\n');

            if ~isnan(p) % p is NaN when there is only one datapoint
                % print anova results
                fprintf(fid,'\nKruskal-Wallis test:\n');
                fprintf(fid,'%s\t%s\t\t%s\t%s\t%s\t%s\n',table{1,1:6});
                fprintf(fid,'%s\t%.2e\t\t%d\t%.2e\t%.3f\t%.2e\n',table{2,1:6});
                fprintf(fid,'%s\t%.2e\t\t%d\t%.2e\n',table{3,1:4});
                fprintf(fid,'%s\t%.2e\t\t%d\n',table{4,1:3});
                if strcmp(compare,'class')
                    compares = [compare 'es'];
                else
                    compares = [compare 's'];
                end
                if p>0.05
                    fprintf(fid,'Medians DO NOT significantly differ amongst %s (Kruskal-Wallis, p=%.2e).\n',compares,p);
                else
                    fprintf(fid,'Medians significantly differ amongst %s (Kruskal-Wallis, p=%.2e).\n',compares,p);
                end

                % print ranking results
                fprintf(fid,'\nRanking based of multiple comparison of the medians:\n');
                fprintf(fid,'------------------------------------------------------------------------\n');
                fprintf(fid,'%s\t\tMEAN\t\tMEAN(95%c)\t\tSEM\t\t[Rmin Rmax]\n',compare,'%');
                fprintf(fid,'------------------------------------------------------------------------\n');
                for ii=1:length(gnamess)
                    if strcmp(compare,'ROI') | strcmp(compare,'treat')
                        fprintf(fid,'%s\t\t%.5f\t\t(%.5f %.5f)\t\t%.5f\t\t[%d %d]\n', gnamess{ii},ranking(ii,:));
                    end;
                    if strcmp(compare,'class')
                        if isempty(str2num(gnamess{ii}))
                            fprintf(fid,'%c\t\t%.5f\t\t(%.5f %.5f)\t\t%.5f\t\t[%d %d]\n', gnamess{ii},ranking(ii,:));
                        else
                            fprintf(fid,'%c\t\t%.5f\t\t(%.5f %.5f)\t\t%.5f\t\t[%d %d]\n', str2num(gnamess{ii}),ranking(ii,:));
                        end;
                    end;
                end;    
                fprintf(fid,'------------------------------------------------------------------------\n');

                ranking_table_explanation(fid,'MEDIAN',compare,[1 1]);
            end

            % append also the actual data, for completeness
            fprintf(fid, '*********\nALL DATA:\ncls\ttmnt\t%s\n',r);
            out=[cls g x];
            fprintf(fid, '%c\t%d\t%.4e\n',out');
            
            fclose(fid);
            fprintf(1,'Results of statistical comparison saved in %s\n',a);

            if ~isnan(p) % p is NaN when there is only one datapoint
                
                % print as EPS, convert to PDF
                [filepath filename ext]=fileparts(a);
                filepath = fileparts(filepath);            
                a = [filepath delimiter 'eps' delimiter filename '.eps'];

                % set all objects except axes1 as invisible before printing
                set_stats_objects_visibility(handles,'off');

                global additional_settings;
                
                print_figure(handles.figure1,a,additional_settings.print_factors(5));
                %fprintf(1,'EPS output generated in %s\n',a);
                mepstopdf(a,'epstopdf',1,1);

                % set all objects back to visible
                set_stats_objects_visibility(handles,'on');
            end
            
        end
        
    end

end
